<PageTitle>Board Task</PageTitle>

<h1>Welcome to Board Task</h1>
@page "/"
@page "/tasks"
@using System.Collections.Generic
@using System.Linq
@using System.Text.Json.Serialization
@using Arke.ToDoList.WebSite.Services
@using Arke.ToDoList.WebSite.Shared

<h1>Board Task</h1>

<button type="button" @onclick="DeleteCompletedTasks">Delete all completed tasks</button>

<h2>@(isEditing ? "Edit Task" : "Add new Task")</h2>
<form @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="taskName">Name:</label>
        <input type="text" id="taskName" @bind="currentTask.Name" required />
    </div>
    <div class="form-group">
        <label for="taskDescription">Description:</label>
        <textarea id="taskDescription" @bind="currentTask.Description" disabled="@isEditing" rows="4" required></textarea>
    </div>
    <div class="form-group">
        <label for="taskStatus">Status:</label>
        <select id="taskStatus" @bind="currentTask.Status" disabled="@isEditing" required>
            <option value=""></option>
            <option value="ToDo">Todo</option>
            <option value="InProgress">InProgress</option>
            <option value="Done">Done</option>
        </select>
    </div>
    <div class="form-group">
        <button type="submit">@((isEditing ? "Save" : "Add Task"))</button>
        @if (isEditing)
        {
            <button type="button" @onclick="ResetForm">Cancel</button>
        }
    </div>
</form>

<div id="taskContainer">
    @foreach (var task in tasks)
    {
        <div class="task">
            <h3 class="taskName">Name: @task.Name</h3>
            <h5 class="taskName">Id: @task.Id</h5>
            <p class="taskDescription">Description: @task.Description</p>
            <p class="taskStatus">Status: @task.Status</p>
            <button @onclick="() => StartEditTask(task)">Edit</button>
            <button @onclick="() => ToggleStatusSelector(task)">Change Status</button>
            @if (statusSelectorVisible.Contains(task))
            {
                <div class="status-select">
                    <select @onchange="(e) => UpdateStatus(task, e.Value.ToString())">
                        <option value=""></option>
                        <option value="ToDo">Todo</option>
                        <option value="InProgress">InProgress</option>
                        <option value="Done">Done</option>
                    </select>
                </div>
            }
        </div>
    }
</div>
@code {
    [Inject] private ITaskService TaskService { get; set; }
    [Inject] IJSRuntime JS { get; set; }
    private List<TaskItem> tasks = new();
    private TaskItem currentTask = new();
    private TaskItem taskToEdit = null;
    private bool isEditing = false;
    private HashSet<TaskItem> statusSelectorVisible = new HashSet<TaskItem>();

    protected override async Task OnInitializedAsync()
    {
        var list = await Task.Run(() => TaskService.GetTasksAsync());
        tasks = list.ToList();
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (isEditing)
            {
                await UpdateTask();
            }
            else
            {
                await AddTask();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            ResetForm();
        }

    }

    private async Task UpdateTask()
    {
        // Update existing task
        if (taskToEdit != null)
        {
            taskToEdit.Name = currentTask.Name;
            taskToEdit.Description = currentTask.Description;
            taskToEdit.Status = currentTask.Status;
            await Task.Run(() => TaskService.UpdateTaskAsync(currentTask.Id, taskToEdit));
            await JS.InvokeVoidAsync("alert", "Task updated successfully!");
            // Reset the reference
            taskToEdit = null;
        }
    }

    private async Task AddTask()
    {
        // Add new task
        var newTask = new TaskItem
            {
                Name = currentTask.Name,
                Description = currentTask.Description,
                Status = currentTask.Status
            };
        var result = await Task.Run(() => TaskService.AddTaskAsync(newTask));
        await JS.InvokeVoidAsync("alert", "Task added successfully!");
        tasks.Add(result);
    }

    private void StartEditTask(TaskItem task)
    {
        statusSelectorVisible = new HashSet<TaskItem>();
        currentTask = new TaskItem
            {
                Id = task.Id,
                Name = task.Name,
                Description = task.Description,
                Status = task.Status
            };
        taskToEdit = task; // Keep reference to the task to edit
        isEditing = true;
    }

    private async Task DeleteCompletedTasks()
    {
        if (tasks.Any(x => x.Status == "Done"))
        {
            try
            {
                await Task.Run(() => TaskService.DeleteCompletedTasks());
                await JS.InvokeVoidAsync("alert", "everything deleted!");
                tasks.RemoveAll(x => x.Status == "Done");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", ex.Message);
            }
        }
    }

    private void ResetForm()
    {
        currentTask = new TaskItem();
        isEditing = false;
        taskToEdit = null;
    }

    private void ToggleStatusSelector(TaskItem task)
    {
        ResetForm();
        if (statusSelectorVisible.Contains(task))
        {
            statusSelectorVisible.Remove(task);
        }
        else
        {
            statusSelectorVisible.Add(task);
        }
    }

    private async Task UpdateStatus(TaskItem task, string newStatus)
    {
        try
        {
            await Task.Run(() => TaskService.ChangeStatus(task.Id, newStatus));
            task.Status = newStatus;
            statusSelectorVisible.Remove(task);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
    }
}
